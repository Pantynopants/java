/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatclient;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPasswordField;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
/**
 *
 * @author ldp
 */
public class MainFrame extends javax.swing.JFrame {

    
//	public static JButton btnSend = new JButton("send");
//	public static JTextField messageContent;
//	public static JTextArea messageFrom;
//	public static JComboBox<String> comboBox;
    
    public  javax.swing.JButton btnSend;
    public  javax.swing.JButton btnSendFile;
    public  javax.swing.JComboBox<String> comboBox;
    public  javax.swing.JButton emoji;
    public  javax.swing.JButton getUserList;
    public  javax.swing.JList<String> jList1;
    public  javax.swing.JMenu jMenu1;
    public  javax.swing.JMenu jMenu2;
    public  javax.swing.JMenuBar jMenuBar1;
    public  javax.swing.JScrollPane jScrollPane1;
    public  javax.swing.JScrollPane jScrollPane2;
    public  javax.swing.JScrollPane jScrollPane3;
    public  javax.swing.JScrollPane jScrollPane4;
    public  javax.swing.JTabbedPane jTabbedPane1;
   // public  javax.swing.JTextArea jTextArea3;
  // public  javax.swing.JTextArea messageContent;
    //public  javax.swing.JTextArea messageFrom;
    
    public javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JScrollPane jScrollPane6;
    public javax.swing.JScrollPane jScrollPane7;
    public javax.swing.JTextPane messageContent;
    public javax.swing.JTextPane jTextPane2;
    public javax.swing.JTextPane messageSend;
    
    
	private Socket s1 = null;
	public static int PortOfFileTrans = 8888;
	
	private DataInputStream dis = null;
	private DataOutputStream dos = null;
	
	protected String name;
	public ArrayList<ExpressionIndex> messageWithEmoji= new ArrayList<ExpressionIndex>();
	
	public static SimpleAttributeSet timeattrset = new SimpleAttributeSet();
	public static SimpleAttributeSet textattrset = new SimpleAttributeSet();
	
	private FriendStatus friendsList;
	
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        messageContent = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        btnSendFile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<String>();
        comboBox = new javax.swing.JComboBox<String>();
        emoji = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        getUserList = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        messageSend = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jScrollPane5.setViewportView(messageContent);

        jTabbedPane1.addTab("talking to", jScrollPane5);

        jScrollPane6.setViewportView(jTextPane2);

        jTabbedPane1.addTab("talking to", jScrollPane6);

        btnSendFile.setText("send File");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "			tom			", "			lucy			", "			jack			", "			allUser			", "			+			" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        comboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        emoji.setText("emoji");
        emoji.setToolTipText("");

        btnSend.setText("send");

        getUserList.setText("friend");

        jScrollPane7.setViewportView(messageSend);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(getUserList, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emoji, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSendFile, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1)
                    .addComponent(jScrollPane7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(comboBox, 0, 176, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(btnSendFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emoji, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(getUserList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("talking");

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */


public MainFrame(Socket s, String name) {
		
		this.s1 = s;
		this.name = name;
		initComponents();
		MainFrame.this.setTitle(name);
		
		ReceiveMessageThread userReceiveMessageThread = new ReceiveMessageThread(s1, MainFrame.this, name);
		userReceiveMessageThread.start();
		
		try {
			dis = new DataInputStream(s1.getInputStream());
			dos = new DataOutputStream(s1.getOutputStream());
			
			dos.writeUTF("102|");
			System.out.println(name + " send 102");
			dos.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
        MainFrame.this.setVisible(true);
           
		btnSend.addActionListener(new btnSendListener());
		btnSendFile.addActionListener(new btnSendFileListener());
		getUserList.addActionListener(new getUserListListener());
		emoji.addActionListener(new emojiFileListener());
		
		friendsList = new FriendStatus(MainFrame.this);
 	}

	
	class getUserListListener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			try {
				dis = new DataInputStream(s1.getInputStream());
				dos = new DataOutputStream(s1.getOutputStream());
				
				dos.writeUTF("102|");
				System.out.println(name + " send 102");
				dos.flush();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		
	}

	class btnSendListener implements ActionListener{
		  public void actionPerformed(ActionEvent e) {

			  	//System.out.println("send message");
						/*
						 * make a communication protocol between server and client
						 * 
						 * 101|name, pass -- login to server
						 * 102| 		   --ask server for user list
						 * 103|from, to, message -- talk to other user
						 * 
						 */
						
			  			Document receiveDoc = messageContent.getDocument();
			  
						String from = MainFrame.this.name;
						String to = MainFrame.this.comboBox.getSelectedItem().toString();
						
//						System.out.println(Listto);
						if (to == null) {
							String Listto = MainFrame.this.jList1.getSelectedValue().trim();
							to = Listto;
						}
						String content = MainFrame.this.messageSend.getText();
						content = ConvertExpression.sendmessage(messageWithEmoji, content);
						
						System.out.println(content);
						String time = new Date().toString();
						
						try {
							dis = new DataInputStream(s1.getInputStream());
							dos = new DataOutputStream(s1.getOutputStream());
							if (!to.equals("allUser")) {
								dos.writeUTF("103|" + from + "," + to + "," + content);
								
								dos.flush();
							} else {
								//to.equals("allUser")
								
								ArrayList<Userinfo> userList = friendsList.getFriendList();
								friendsList.printFriendList();
								
								for (int i = 0; i < userList.size(); i++) {
									
									Userinfo u = userList.get(i);
									if (!u.getName().equals(from) || !u.getName().equals("allUser")) {
										to = u.getName();
										dos.writeUTF("103|" + from + "," + to + "," + content);
										dos.flush();
									}
									
									try {
										Thread.sleep(1000);
									} catch (InterruptedException e1) {
										e1.printStackTrace();
									}
									
									
								}
							}
							
							//change messageSend and messageContent 
	                        try {
//	                            receiveDoc.insertString(receiveDoc.getLength(),  "(" + time + ") to " + to + ": \r\n" , Userinfo.header);
//	                            receiveDoc.insertString(receiveDoc.getLength(), content + "\r\n", Userinfo.body);
	                            
	                            String str = "(" +  time + ") ";	
	                        	receiveDoc.insertString(receiveDoc.getLength(), str, MainFrame.timeattrset);
	    						str = "you send to " + to + ":\r\n" + content + "\r\n";						
	    						new ConvertExpression().recievemessage(MainFrame.this, str);
	    						
	                        } catch (BadLocationException ex) {
	                            ex.printStackTrace();
	                        }
	                        
							//MainFrame.this.messageFrom.append("(" + time + ") to " + to +  " :\r\n"+ content + "\r\n");
							MainFrame.this.messageSend.setText(null);
							
							
							
						} catch (IOException e1) {
							e1.printStackTrace();
						}
						
						messageWithEmoji.clear();
				}
		}
	
	class btnSendFileListener implements ActionListener {
		public void actionPerformed(ActionEvent arg0) {
			JFileChooser addChooser = new JFileChooser(); 
			String from = MainFrame.this.name;
			String to = MainFrame.this.comboBox.getSelectedItem().toString();
            addChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES); 
            
            //enable MultiSelection to choose more than one files
            addChooser.setMultiSelectionEnabled(true); 
            
            int returnval = addChooser.showOpenDialog(MainFrame.this);   
            if(returnval == JFileChooser.APPROVE_OPTION) 
            { 
                File[] files = addChooser.getSelectedFiles(); 
                String str = ""; 
                for (File file : files) { 
                	try {
						dos.writeUTF("104|" + from + "," + to + "," + file.getName());
						dos.flush();
						new FileSendThread(file, MainFrame.this.s1).start();							
					} catch (IOException e) {
						e.printStackTrace();
					}                       
                } 
            }
		}
	}

	class emojiFileListener implements ActionListener {
		public void actionPerformed(ActionEvent arg0) {
			Point xy = MainFrame.this.emoji.getLocationOnScreen();  
			double x = xy.getX();
			double y = xy.getY();
			int x1 = (int)x;
			int y1 = (int)y;
			new Expression(MainFrame.this, x1, y1); 
		}
	}
}


/*
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSendFile;
    public javax.swing.JComboBox<String> comboBox;
    private javax.swing.JButton emoji;
    private javax.swing.JButton getUserList;
    public javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane messageContent;
    private javax.swing.JTextPane messageSend;
    // End of variables declaration                   

*/